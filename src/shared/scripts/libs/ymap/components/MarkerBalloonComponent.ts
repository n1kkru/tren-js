import mapMarkerSVG from '@shared/assets/images/svg/checkbox-check.svg'
import type { YMap, YMapMarker } from '@yandex/ymaps3-types'

export interface IContactItem {
  href: string
  target?: string
  children?: {
    icon?: string
    text: string
  }
}

export interface IMarkerData {
  id?: string
  coords: string
  title?: string
  subtitle?: string
  address?: string
  contacts?: IContactItem[]
  regions?: string
}

const parseCoords = (coordsStr: string): [number, number] => {
  const arr = coordsStr.split(',').map(v => parseFloat(v.trim()))
  return arr.length === 2 ? [arr[0], arr[1]] : [0, 0]
}

/**
 * –ö–ª–∞—Å—Å PopupMarkerComponent
 * - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ "markerData"
 * - –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞—ë—Ç YMapMarker
 * - –í balloon.content –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç HTML –∏–∑ —à–∞–±–ª–æ–Ω–∞ <template>, –∑–∞–ø–æ–ª–Ω—è—è –ø–æ–ª—è
 */
class PopupMarkerComponent {
  private map: YMap
  private markerData: IMarkerData[]
  private markers: any[] = []
  private currentOpenBalloon: HTMLElement | null = null
  private markerMap: Map<string, any> = new Map()

  /**
   * @param map —ç–∫–∑–µ–º–ø–ª—è—Ä YMap
   * @param markerData –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä–∫–µ—Ä–∞—Ö
   * @param balloonTemplateSelector —Å–µ–ª–µ–∫—Ç–æ—Ä <template>, –Ω–∞–ø—Ä–∏–º–µ—Ä "#balloonTmpl", "[data-map-template]" –∏ —Ç.–¥.
   */
  constructor(map: YMap, markerData: IMarkerData[]) {
    this.map = map
    this.markerData = markerData

    this.init()
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã: —Å–æ–∑–¥–∞—ë–º YMapMarker –¥–ª—è –∫–∞–∂–¥–æ–≥–æ item.
   */
  private init(): void {
    this.template = document.querySelector('[data-map-template]')

    this.markerData.forEach(dataItem => {
      const marker = this.createMarker(dataItem)
      this.map.addChild(marker)
      this.markers.push(marker)
    })
  }

  /**
   * –°–æ–∑–¥–∞—ë–º YMapMarker —Å balloon.content = HTML, –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∏–∑ —à–∞–±–ª–æ–Ω–∞.
   */
  private createMarker(dataItem: IMarkerData): any {
    const coords = parseCoords(dataItem.coords)
    if (!coords.length) return
    const markerElement = document.createElement('div')

    markerElement.innerHTML = mapMarkerSVG
    markerElement.classList.add('map__marker')
    markerElement.querySelector('svg')?.classList.add('initial')
    markerElement.dataset.mapMarker = ''

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
    const marker = new ymaps3.YMapMarker({ coordinates: coords }, markerElement)

    // üî• –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∏–∫–∞
    if (dataItem.id) {
      const id = String(dataItem.id)

      this.markerMap.set(String(dataItem.id), {
        marker,
        coords
      })

      markerElement.addEventListener('click', () => {
        this.resetActiveMarkers()
        marker.element?.classList.add('map__marker--active')

        // –ù–∞–π–¥—ë–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π DOM-—ç–ª–µ–º–µ–Ω—Ç
        const target = document.querySelector(`[data-list-placemark-id="${id}"]`)
        if (target) {
          // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É –≤—Å–µ—Ö
          document
            .querySelectorAll('[data-list-placemark-id]')
            .forEach(el => el.classList.remove('is-active'))

          target.classList.add('is-active')

          // –°–∫—Ä–æ–ª–ª–∏–º –¥–æ –Ω–µ–≥–æ
          target.scrollIntoView({ behavior: 'smooth', block: 'center' })
        }

        // –¶–µ–Ω—Ç—Ä—É–µ–º –∫–∞—Ä—Ç—É (–æ–ø—Ü.)
        this.map.update({
          location: {
            center: coords,
            zoom: this.map.zoom,
            duration: 300
          }
        })
      })
    }

    return marker
  }

  /**
   * –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞—Ä–∫–µ—Ä–µ –∏ –≤—ã–¥–µ–ª—è–µ—Ç –µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ.
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞.
   *
   * @param id - ID –º–∞—Ä–∫–µ—Ä–∞ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç dataItem.id –∏–∑ markerData)
   */
  public focusOnMarker(id: string): void {
    const found = this.markerMap.get(String(id))
    if (!found) {
      return
    }

    const { marker, coords } = found

    this.map.update({
      location: {
        center: coords,
        zoom: 13,
        duration: 200
      }
    })

    this.resetActiveMarkers()
    marker.element?.classList.add('map__marker--active')
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ.
   * –£–¥–∞–ª—è–µ—Ç –∫–ª–∞—Å—Å `map__marker--active` —É –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä–∫–µ—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
   * –ü–æ–ª–µ–∑–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞.
   */
  public resetActiveMarkers(): void {
    for (const marker of this.markerMap.values()) {
      marker.element?.classList.remove('map__marker--active')
    }
  }
}

export { PopupMarkerComponent }
