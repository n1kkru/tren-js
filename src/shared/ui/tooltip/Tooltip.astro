---
import type { Props as TippyCoreProps } from 'tippy.js'

interface TooltipAstroProps {
  content: string
  placement?: TippyCoreProps['placement']
  class?: string
  id?: string

  // Названия глобальных функций
  onShow?: string
  onHide?: string
  onMount?: string
  onTrigger?: string
  onUntrigger?: string

  // Всё остальное — пойдёт прямо в tippy, кроме конфликтных событий
  tippyOptions?: Partial<
    Omit<TippyCoreProps, 'onShow' | 'onHide' | 'onMount' | 'onTrigger' | 'onUntrigger'>
  >
}

const {
  content,
  placement = 'top',
  class: className = '',
  id = `tooltip-${Math.random().toString(36).slice(2)}`,
  onShow,
  onHide,
  onMount,
  onTrigger,
  onUntrigger,
  tippyOptions = {}
} = Astro.props as TooltipAstroProps

const tippyConfig = {
  content,
  placement,
  ...tippyOptions
}

export { Tooltip }
---

<span
  class:list={['tooltip', className]}
  id={id}
  data-tooltip
  data-tooltip-config={JSON.stringify(tippyConfig)}
  data-tooltip-events={JSON.stringify({ onShow, onHide, onMount, onTrigger, onUntrigger })}
>
  <slot />
</span>

<style>
  @import './tooltip.scss';
</style>
