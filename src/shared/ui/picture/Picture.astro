---
/**
 * Picture.astro
 *
 * • src / mobile / tablet — принимают либо ImageMetadata, либо строку-ключ из реестра изображений
 * • sources — массив произвольных { src, breakpoint }
 * • Автоматически проверяем, что AVIF реально сгенерировался, иначе сразу переходим к WebP
 */
import { getImage } from 'astro:assets'
import { images, type ImageKey } from '@shared/assets/_images' // глобальный реестр
import type { ImageMetadata } from 'astro'

/* ---------- Типы ---------- */

interface SimpleSource {
  src: ImageMetadata | ImageKey
  breakpoint: number | string
}

interface PictureProps {
  /* основной файл */
  src: ImageMetadata | ImageKey
  /* шорт-хенд под мобильный и планшет */
  mobile?: ImageMetadata | ImageKey
  tablet?: ImageMetadata | ImageKey
  /* произвольные источники */
  sources?: SimpleSource[]

  alt?: string
  class?: string
  sizes?: string
  quality?: number
  widths?: number[]
  loading?: 'lazy' | 'eager'
  fetchpriority?: 'high' | 'low' | 'auto'
  imgAttributes?: astroHTML.JSX.ImgHTMLAttributes
}

/* ---------- Деструктуризация пропов ---------- */

const {
  src,
  mobile,
  tablet,
  sources = [],
  alt = '',
  class: className,
  sizes = '100vw',
  quality = 75,
  widths,
  loading = 'lazy',
  fetchpriority,
  imgAttributes,
  ...rest
} = Astro.props as PictureProps

const { class: imgClass, ...imgRest } = imgAttributes ?? {}

/* ---------- helpers ---------- */

const bp = (v: string | number) => (typeof v === 'number' ? v : parseInt(v, 10))

/* берём ImageMetadata по ключу-строке или переданный объект */
const toMeta = (input: ImageMetadata | ImageKey | undefined): ImageMetadata | undefined =>
  !input ? undefined : typeof input === 'string' ? images[input] : input

/** safe getImage + возврат null при ошибке */
async function safeGetImage(opts: Parameters<typeof getImage>[0]) {
  try {
    return await getImage(opts)
  } catch {
    return null
  }
}

/** проверяем что в srcset реально avif, а не webp-fallback */
const isRealAvif = (srcSet?: string) => !!srcSet && /[?&]f=avif\b/i.test(srcSet)

/** финальный набор ширин */
function getWidths(base: number): number[] {
  const arr = widths ?? [Math.round(base / 2), base, base * 2]
  return Array.from(new Set(arr.filter(n => n > 0))).sort((a, b) => a - b)
}

/* ---------- резолвим все картинки ---------- */

const mainImage = toMeta(src)
if (!mainImage) throw new Error(`Picture: image "${String(src)}" not found in registry`)

const responsiveRaw: SimpleSource[] = [
  mobile && { src: mobile, breakpoint: 768 },
  tablet && { src: tablet, breakpoint: 1200 },
  ...sources
].filter(Boolean) as SimpleSource[]

const resolvedSources = responsiveRaw
  .map(s => ({ ...s, image: toMeta(s.src)! }))
  .filter(s => s.image) // drop not found
  .sort((a, b) => bp(a.breakpoint) - bp(b.breakpoint))

/* ---------- генерируем source-наборы ---------- */

const preparedSources = await Promise.all(
  resolvedSources.map(async ({ image, breakpoint }) => {
    const w = getWidths(image.width)

    const avifCandidate = await safeGetImage({
      src: image,
      formats: ['avif'],
      widths: w,
      quality
    })
    const avifSrcSet = isRealAvif(avifCandidate?.srcSet.attribute)
      ? avifCandidate?.srcSet.attribute
      : undefined

    const webp =
      avifSrcSet === undefined
        ? await safeGetImage({
            src: image,
            formats: ['webp'],
            widths: w,
            quality
          })
        : undefined

    return {
      media: `(max-width: ${bp(breakpoint)}px)`,
      avifSrcSet,
      webpSrcSet: webp?.srcSet.attribute,
      fallbackSrcSet: image.src,
      fallbackType: `image/${image.format}`
    }
  })
)

/* ---------- main image (desktop) ---------- */

const baseWidths = getWidths(mainImage.width)

const baseAvifCand = await safeGetImage({
  src: mainImage,
  formats: ['avif'],
  widths: baseWidths,
  quality
})
const baseAvif = isRealAvif(baseAvifCand?.srcSet.attribute) ? baseAvifCand : null

const baseWebp =
  baseAvif === null
    ? await safeGetImage({
        src: mainImage,
        formats: ['webp'],
        widths: baseWidths,
        quality
      })
    : null
---

<picture
  class:list={['picture', className]}
  {...rest}
>
  {/* responsive chain */}
  {
    preparedSources.map(({ media, avifSrcSet, webpSrcSet, fallbackSrcSet, fallbackType }) => (
      <>
        {avifSrcSet && (
          <source
            media={media}
            type="image/avif"
            srcset={avifSrcSet}
            sizes={sizes}
          />
        )}
        {webpSrcSet && (
          <source
            media={media}
            type="image/webp"
            srcset={webpSrcSet}
            sizes={sizes}
          />
        )}
        <source
          media={media}
          type={fallbackType}
          srcset={fallbackSrcSet}
          sizes={sizes}
        />
      </>
    ))
  }

  {/* global sources (desktop) */}
  {
    baseAvif?.srcSet && (
      <source
        type="image/avif"
        srcset={baseAvif.srcSet.attribute}
        sizes={sizes}
      />
    )
  }
  {
    baseWebp?.srcSet && (
      <source
        type="image/webp"
        srcset={baseWebp.srcSet.attribute}
        sizes={sizes}
      />
    )
  }
  <source
    type={`image/${mainImage.format}`}
    srcset={mainImage.src}
    sizes={sizes}
  />

  <img
    src={mainImage.src}
    alt={alt}
    width={mainImage.width}
    height={mainImage.height}
    decoding="async"
    loading={loading}
    fetchpriority={fetchpriority}
    class:list={['picture__img', imgClass]}
    {...imgRest}
  />
</picture>

<style>
  @import './picture.scss';
</style>
